//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatWCF.ServiceChatReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatUser", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class ChatUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastActivityDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatronymicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastActivityDate {
            get {
                return this.LastActivityDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastActivityDateField, value) != true)) {
                    this.LastActivityDateField = value;
                    this.RaisePropertyChanged("LastActivityDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Patronymic {
            get {
                return this.PatronymicField;
            }
            set {
                if ((object.ReferenceEquals(this.PatronymicField, value) != true)) {
                    this.PatronymicField = value;
                    this.RaisePropertyChanged("Patronymic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationDate {
            get {
                return this.RegistrationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationDateField, value) != true)) {
                    this.RegistrationDateField = value;
                    this.RaisePropertyChanged("RegistrationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surename {
            get {
                return this.SurenameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurenameField, value) != true)) {
                    this.SurenameField = value;
                    this.RaisePropertyChanged("Surename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chat", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class Chat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChatAuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChatIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChatNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string availabilityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChatAuthor {
            get {
                return this.ChatAuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatAuthorField, value) != true)) {
                    this.ChatAuthorField = value;
                    this.RaisePropertyChanged("ChatAuthor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChatID {
            get {
                return this.ChatIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatIDField, value) != true)) {
                    this.ChatIDField = value;
                    this.RaisePropertyChanged("ChatID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChatName {
            get {
                return this.ChatNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatNameField, value) != true)) {
                    this.ChatNameField = value;
                    this.RaisePropertyChanged("ChatName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string availability {
            get {
                return this.availabilityField;
            }
            set {
                if ((object.ReferenceEquals(this.availabilityField, value) != true)) {
                    this.availabilityField = value;
                    this.RaisePropertyChanged("availability");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChatIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChatID {
            get {
                return this.ChatIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatIDField, value) != true)) {
                    this.ChatIDField = value;
                    this.RaisePropertyChanged("ChatID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationDateField, value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageIDField, value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChatReference.IServiceChat", CallbackContract=typeof(ChatWCF.ServiceChatReference.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/UserRegistration", ReplyAction="http://tempuri.org/IServiceChat/UserRegistrationResponse")]
        bool UserRegistration(ChatWCF.ServiceChatReference.ChatUser chatUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/UserRegistration", ReplyAction="http://tempuri.org/IServiceChat/UserRegistrationResponse")]
        System.Threading.Tasks.Task<bool> UserRegistrationAsync(ChatWCF.ServiceChatReference.ChatUser chatUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/UserLogin", ReplyAction="http://tempuri.org/IServiceChat/UserLoginResponse")]
        ChatWCF.ServiceChatReference.ChatUser UserLogin(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/UserLogin", ReplyAction="http://tempuri.org/IServiceChat/UserLoginResponse")]
        System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.ChatUser> UserLoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateChat", ReplyAction="http://tempuri.org/IServiceChat/CreateChatResponse")]
        bool CreateChat(string chatName, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateChat", ReplyAction="http://tempuri.org/IServiceChat/CreateChatResponse")]
        System.Threading.Tasks.Task<bool> CreateChatAsync(string chatName, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetChatList", ReplyAction="http://tempuri.org/IServiceChat/GetChatListResponse")]
        ChatWCF.ServiceChatReference.Chat[] GetChatList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetChatList", ReplyAction="http://tempuri.org/IServiceChat/GetChatListResponse")]
        System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.Chat[]> GetChatListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserChatList", ReplyAction="http://tempuri.org/IServiceChat/GetUserChatListResponse")]
        ChatWCF.ServiceChatReference.Chat[] GetUserChatList(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserChatList", ReplyAction="http://tempuri.org/IServiceChat/GetUserChatListResponse")]
        System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.Chat[]> GetUserChatListAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/SendMessage", ReplyAction="http://tempuri.org/IServiceChat/SendMessageResponse")]
        void SendMessage(ChatWCF.ServiceChatReference.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/SendMessage", ReplyAction="http://tempuri.org/IServiceChat/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(ChatWCF.ServiceChatReference.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string userID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(ChatWCF.ServiceChatReference.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ChatWCF.ServiceChatReference.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ChatWCF.ServiceChatReference.IServiceChat>, ChatWCF.ServiceChatReference.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool UserRegistration(ChatWCF.ServiceChatReference.ChatUser chatUser) {
            return base.Channel.UserRegistration(chatUser);
        }
        
        public System.Threading.Tasks.Task<bool> UserRegistrationAsync(ChatWCF.ServiceChatReference.ChatUser chatUser) {
            return base.Channel.UserRegistrationAsync(chatUser);
        }
        
        public ChatWCF.ServiceChatReference.ChatUser UserLogin(string login, string password) {
            return base.Channel.UserLogin(login, password);
        }
        
        public System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.ChatUser> UserLoginAsync(string login, string password) {
            return base.Channel.UserLoginAsync(login, password);
        }
        
        public bool CreateChat(string chatName, string author) {
            return base.Channel.CreateChat(chatName, author);
        }
        
        public System.Threading.Tasks.Task<bool> CreateChatAsync(string chatName, string author) {
            return base.Channel.CreateChatAsync(chatName, author);
        }
        
        public ChatWCF.ServiceChatReference.Chat[] GetChatList() {
            return base.Channel.GetChatList();
        }
        
        public System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.Chat[]> GetChatListAsync() {
            return base.Channel.GetChatListAsync();
        }
        
        public ChatWCF.ServiceChatReference.Chat[] GetUserChatList(string userID) {
            return base.Channel.GetUserChatList(userID);
        }
        
        public System.Threading.Tasks.Task<ChatWCF.ServiceChatReference.Chat[]> GetUserChatListAsync(string userID) {
            return base.Channel.GetUserChatListAsync(userID);
        }
        
        public void SendMessage(ChatWCF.ServiceChatReference.Message message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(ChatWCF.ServiceChatReference.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void Disconnect(string userID) {
            base.Channel.Disconnect(userID);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string userID) {
            return base.Channel.DisconnectAsync(userID);
        }
    }
}
